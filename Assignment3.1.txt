print('\n1Q. Which key word is used to create a function,? Create a function to return a list of odd numbers in the range 1 to 25.')
print('Ans. The key word def is used to create a function. The required list of numbers is given below using functions:')
def odd():
    '''Finding odd numbers'''
    l=[]
    for i in range (1,26):
        if i%2 != 0:
            l.append(i)
    return l
print(odd())
print('\n2Q. Why *args and **kwargs is used in some functions? Create a function for each *args and ** kwargs to demonstrate their use.')
print('Ans. *args and **kwargs are used in functions when the number of arguments to be given are unknown or may change at the time of use.\n*args can take any number of arguments and makes a tuple for the values to be stored in the result, it can be of any valid name preceeded by an * symbol.\n**kwargs are used in functions when we want the result to be in the form of a dictionary.\nAn example for *args:')
def f1(*args):
    return args
print(f1(1,2,4,8))
print('Example for **kwargs:')
def f2(**kwargs):
    return kwargs
print(f2(Name='Ruthik',age=17,University='AU'))
print('\n3Q. What is an iterator in python? Name the method used to initialise the iterator object and the method used for itertion. Use these meyhods to print the first five elements of the given list:[2,4,6,8,10,12,14,16,18,20].')
print('Ans. An iterator iterates or goes through the elements of a list or a tuple or any other object which can be iterated so that it is possible for indexing of elements in that . Hence, we access the set of elements easily for a wide variety of purposes,\nThe first five elements of the given list through iterations is as follows:')
my=[2,4,6,8,10,12,14,16,18,20]
l=[]
for i in my:
   l.append(i)
   if len(l)>=5:
        break
print(l)
print('\n4Q. What is a generator in python? Why yield keyword is used? Give an example of a generator function.')
print('Ans.In Python, a generator function is a special type of function that generates a sequence of values using the yield keyword instead of return. When a generator function is called, it returns an iterator object, which can be iterated over to retrieve the values generated by the function.In the example above, each time the yield keyword is encountered, the current value of i is returned, and the function's state is saved. The next time the generator is iterated over, it resumes from where it left off, continuing the loop and generating the next value.Here's an example of a generator function that generates a sequence of even numbers:')
def even_numbers(n):
    i = 0
    while i <= n:
        yield i
        i += 2
for num in even_numbers(10):
   print(num)
print('\n5Q. Create a generator function for prime numbers less than 1000. Use the next() method to print the first 20 prime numbers.\nAns. The required prime numbers are as follows:\n')
def is_prime(num):
    if num < 2:
        return False
    for i in range(2, int(num ** 0.5) + 1):
        if num % i == 0:
            return False
    return True

def generate_primes():
    num = 2
    while True:
        if is_prime(num):
            yield num
        num += 1

def find_primes(n):
    primes = []
    prime_generator = generate_primes()
    while len(primes) < n:
        primes.append(next(prime_generator))
    return primes


n = 20
prime_numbers = find_primes(n)
print(f"The first {n} prime numbers below a thousand are:")
print(prime_numbers)

print('\n6Q. Write a python program to print the first 10 fibonacci numbers using a while loop?')
print('\nAns. The fibonacci numbers are as follows:')
def fib():
    a,b=0,1
    while True:
      yield a
      a,b=b,a+b
fib_num=fib()
for i in range(10):
    print(next(fib_num))
print('\n7Q. Write a list comprehention to iterate through the following string: "pwskills" for the expected output:('p','w','s','k'.'i','l','l','s']\nAns. The required list is as follows:')
word= "pwskills"
letters=[]
for i in word:
  letters.append(i)
print(letters)
print('\n8Q. Write a python program to check whether the given number is a palindrome or not.\nAns. If the given number is 999 then the output will be:\n')
def palindrome(num):
    n=str(num)
    m=n[::-1]
    if m==n:
       print('The given number is a palindrome')
    else:
       print('The given number is not a palindrome')
palindrome(999)
print('\n9Q. Write a code to print odd numbers from 1 to 100 using list comprehention.\nAns. The odd numbers in the range 1 to 100 are as follows:')
nos=[]
for i in range(1,101):
    nos.append(i)

list(filter(lambda i: i%2 != 0 ,nos))

    